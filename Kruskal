/* kruskal : greedy이용해서 모든 간선 정보를 오름차순 으로 정리후에, 비용이 
적은 간선부터 차근차근 그래프에 포함시킨다. 포함시킬 때 사이클 배열을 확인하여 사이클을
형성하는 경우 간선을 포함하지 않는다. 사이클 배열을 1로 맞춘후, union-find를 이용한다. */

#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

int getParent(int set[], int x)
{
	if (set[x] == x) return x;

	return set[x] = getParent(set, set[x]);
}

int findParent(int *set, int a, int b)
{
	a = getParent(set, a);
	b = getParent(set, b);
	if (a == b) return 1;
	else return 0;
}

void unionParent(int set[], int a, int b)
{
	a = getParent(set, a);
	b = getParent(set, b);
	if (a < b) set[b] = a;
	else set[a] = b;
}

class Edge
{
public:

	int node[2];
	int distance;
	Edge(int a, int b, int distance)
	{
		this->node[0] = a;
		this->node[1] = b;
		this->distance = distance;
	}
	bool operator<(Edge a)
	{
		return this->distance < a.distance;
	}
};

int main() {
	const int n = 7;
	int m = 11;

	vector<Edge> v;
	v.push_back(Edge(1, 7, 12));
	v.push_back(Edge(1, 4, 28));
	v.push_back(Edge(1, 2, 67));
	v.push_back(Edge(1, 5, 17));
	v.push_back(Edge(2, 4, 24));
	v.push_back(Edge(2, 5, 62));
	v.push_back(Edge(3, 5, 20));
	v.push_back(Edge(3, 6, 37));
	v.push_back(Edge(4, 7, 13));
	v.push_back(Edge(5, 6, 45));
	v.push_back(Edge(5, 7, 73));

	sort(v.begin(), v.end());

	int set[n];
	for (int i = 0; i < n; i++)
		set[i] = i;

	int sum = 0;
	for (int i = 0; i < v.size(); i++)
	{
		if (!findParent(set, v[i].node[0] - 1, v[i].node[1] - 1))
		{
			sum += v[i].distance;
			unionParent(set, v[i].node[0] - 1, v[i].node[1] - 1);
		}
	}

	printf("%d\n", sum);
	return 0;
}
